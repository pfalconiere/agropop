{"ast":null,"code":"var _jsxFileName = \"/Users/dudaalves/iot-agro/src/App.js\",\n  _s = $RefreshSig$();\n// App.js - Componente principal da aplicação atualizado\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    temperatura: 25.4,\n    luminosidade: 850,\n    umidade: 68\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Simulação de carregamento para demonstração\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n\n    // Simulação de atualização de dados em tempo real\n    const dataTimer = setInterval(() => {\n      setSensorData({\n        temperatura: (Math.random() * 10 + 20).toFixed(1),\n        // Entre 20 e 30\n        luminosidade: Math.floor(Math.random() * 500 + 600),\n        // Entre 600 e 1100\n        umidade: Math.floor(Math.random() * 30 + 50) // Entre 50 e 80\n      });\n    }, 3000);\n\n    // Tente configurar o Firebase (comentado para fins de depuração)\n    /*\n    try {\n      // Configuração do Firebase\n      const firebaseConfig = {\n        apiKey: \"YOUR_API_KEY\",\n        authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n        databaseURL: \"https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com\",\n        projectId: \"YOUR_PROJECT_ID\",\n        storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n        messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n        appId: \"YOUR_APP_ID\"\n      };\n       // Inicializa o Firebase\n      const app = initializeApp(firebaseConfig);\n      const database = getDatabase(app);\n      const sensoresRef = ref(database, 'sensores');\n       // Escuta por mudanças no nó 'sensores' do Realtime Database\n      const unsubscribe = onValue(sensoresRef, (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n          setSensorData(data);\n        }\n        setLoading(false);\n      });\n       // Função de limpeza para desinscrever quando o componente for desmontado\n      return () => {\n        unsubscribe();\n        clearTimeout(timer);\n        clearInterval(dataTimer);\n      };\n    } catch (error) {\n      console.error(\"Erro ao configurar Firebase:\", error);\n      setLoading(false);\n    }\n    */\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(dataTimer);\n    };\n  }, []);\n  const teamMembers = ['Ana', 'Evellyn', 'Hobedes', '', 'Moacir', 'Pedro', 'Thiago'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"IoT Agro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Carregando dados dos sensores...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n        data: sensorData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      members: teamMembers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"P8Z6KrHcMn/Xd9rVasVfA058gy8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","Header","Footer","jsxDEV","_jsxDEV","App","_s","sensorData","setSensorData","temperatura","luminosidade","umidade","loading","setLoading","timer","setTimeout","dataTimer","setInterval","Math","random","toFixed","floor","clearTimeout","clearInterval","teamMembers","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","data","members","_c","$RefreshReg$"],"sources":["/Users/dudaalves/iot-agro/src/App.js"],"sourcesContent":["// App.js - Componente principal da aplicação atualizado\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nfunction App() {\n  const [sensorData, setSensorData] = useState({\n    temperatura: 25.4,\n    luminosidade: 850,\n    umidade: 68\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Simulação de carregamento para demonstração\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n    \n    // Simulação de atualização de dados em tempo real\n    const dataTimer = setInterval(() => {\n      setSensorData({\n        temperatura: (Math.random() * 10 + 20).toFixed(1), // Entre 20 e 30\n        luminosidade: Math.floor(Math.random() * 500 + 600), // Entre 600 e 1100\n        umidade: Math.floor(Math.random() * 30 + 50), // Entre 50 e 80\n      });\n    }, 3000);\n\n    // Tente configurar o Firebase (comentado para fins de depuração)\n    /*\n    try {\n      // Configuração do Firebase\n      const firebaseConfig = {\n        apiKey: \"YOUR_API_KEY\",\n        authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n        databaseURL: \"https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com\",\n        projectId: \"YOUR_PROJECT_ID\",\n        storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n        messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n        appId: \"YOUR_APP_ID\"\n      };\n\n      // Inicializa o Firebase\n      const app = initializeApp(firebaseConfig);\n      const database = getDatabase(app);\n      const sensoresRef = ref(database, 'sensores');\n\n      // Escuta por mudanças no nó 'sensores' do Realtime Database\n      const unsubscribe = onValue(sensoresRef, (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n          setSensorData(data);\n        }\n        setLoading(false);\n      });\n\n      // Função de limpeza para desinscrever quando o componente for desmontado\n      return () => {\n        unsubscribe();\n        clearTimeout(timer);\n        clearInterval(dataTimer);\n      };\n    } catch (error) {\n      console.error(\"Erro ao configurar Firebase:\", error);\n      setLoading(false);\n    }\n    */\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(dataTimer);\n    };\n  }, []);\n\n  const teamMembers = [\n    'Ana',\n    'Evellyn',\n    'Hobedes',\n    '',\n    'Moacir',\n    'Pedro',\n    'Thiago'\n  ];\n\n  return (\n    <div className=\"app\">\n      <Header title=\"IoT Agro\" />\n      <main className=\"main-content\">\n        {loading ? (\n          <div className=\"loading\">Carregando dados dos sensores...</div>\n        ) : (\n          <Dashboard data={sensorData} />\n        )}\n      </main>\n      <Footer members={teamMembers} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}