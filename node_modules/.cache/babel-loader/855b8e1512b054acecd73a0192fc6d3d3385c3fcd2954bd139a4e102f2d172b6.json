{"ast":null,"code":"var _jsxFileName = \"/Users/dudaalves/iot-agro/src/App.js\",\n  _s = $RefreshSig$();\n// App.js - Com controle de tema simplificado\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Alert from './components/Alert';\nimport ThemeToggle from './components/ThemeToggle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    temperatura: 25.4,\n    luminosidade: 850,\n    umidade: 68\n  });\n  const [loading, setLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [alerts, setAlerts] = useState([]);\n\n  // Função para verificar condições e gerar alertas\n  const checkConditionsAndCreateAlerts = data => {\n    const newAlerts = [];\n\n    // Verificar temperatura > 30\n    if (data.temperatura > 30) {\n      newAlerts.push({\n        id: 'temp-high',\n        type: 'danger',\n        message: `Alerta: Temperatura alta (${data.temperatura}°C)! Acima de 30°C.`\n      });\n    }\n\n    // Verificar umidade < 50% ou < 30%\n    if (data.umidade < 30) {\n      newAlerts.push({\n        id: 'humidity-very-low',\n        type: 'danger',\n        message: `Alerta: Umidade crítica (${data.umidade}%)! Abaixo de 30%.`\n      });\n    } else if (data.umidade < 50) {\n      newAlerts.push({\n        id: 'humidity-low',\n        type: 'warning',\n        message: `Atenção: Umidade baixa (${data.umidade}%)! Abaixo de 50%.`\n      });\n    }\n\n    // Alertas para luminosidade\n    if (data.luminosidade < 100) {\n      newAlerts.push({\n        id: 'low-light',\n        type: 'warning',\n        message: `Atenção: Pouca luz (${data.luminosidade} lux)! Abaixo de 100 lux.`\n      });\n    } else if (data.luminosidade > 1000) {\n      newAlerts.push({\n        id: 'high-light',\n        type: 'warning',\n        message: `Atenção: Muita luz (${data.luminosidade} lux)! Acima de 1000 lux.`\n      });\n    }\n    setAlerts(newAlerts);\n  };\n\n  // Toggle simples do tema\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  };\n  useEffect(() => {\n    // Simulação de carregamento para demonstração\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n\n    // Simulação de atualização de dados em tempo real\n    const dataTimer = setInterval(() => {\n      const newData = {\n        temperatura: parseFloat((Math.random() * 15 + 20).toFixed(1)),\n        // Entre 20 e 35\n        luminosidade: Math.floor(Math.random() * 1500),\n        // Entre 0 e 1500\n        umidade: Math.floor(Math.random() * 80 + 10) // Entre 10 e 90\n      };\n      setSensorData(newData);\n      checkConditionsAndCreateAlerts(newData);\n    }, 5000);\n\n    // Tente configurar o Firebase (comentado para fins de depuração)\n    /*\n    try {\n      // Configuração do Firebase\n      const firebaseConfig = {\n        apiKey: \"YOUR_API_KEY\",\n        authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n        databaseURL: \"https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com\",\n        projectId: \"YOUR_PROJECT_ID\",\n        storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n        messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n        appId: \"YOUR_APP_ID\"\n      };\n       // Inicializa o Firebase\n      const app = initializeApp(firebaseConfig);\n      const database = getDatabase(app);\n      const sensoresRef = ref(database, 'sensores');\n       // Escuta por mudanças no nó 'sensores' do Realtime Database\n      const unsubscribe = onValue(sensoresRef, (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n          setSensorData(data);\n          checkConditionsAndCreateAlerts(data);\n        }\n        setLoading(false);\n      });\n       // Função de limpeza para desinscrever quando o componente for desmontado\n      return () => {\n        unsubscribe();\n        clearTimeout(timer);\n        clearInterval(dataTimer);\n      };\n    } catch (error) {\n      console.error(\"Erro ao configurar Firebase:\", error);\n      setLoading(false);\n    }\n    */\n\n    // Verificar condições iniciais\n    checkConditionsAndCreateAlerts(sensorData);\n    return () => {\n      clearTimeout(timer);\n      clearInterval(dataTimer);\n    };\n  }, []);\n  const teamMembers = ['Ana', 'Evellyn', 'Hobedes', 'Moacir', 'Pedro', 'Thiago'];\n\n  // Classe condicional para o tema escuro\n  const appClassName = `app ${darkMode ? 'dark-mode' : ''}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: appClassName,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"IoT Agro\",\n      darkMode: darkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alerts-container\",\n        children: alerts.map(alert => /*#__PURE__*/_jsxDEV(Alert, {\n          type: alert.type,\n          message: alert.message\n        }, alert.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Carregando dados dos sensores...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Dashboard, {\n          data: sensorData,\n          darkMode: darkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"theme-toggle-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(ThemeToggle, {\n            darkMode: darkMode,\n            toggleTheme: toggleTheme\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      members: teamMembers,\n      darkMode: darkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j/DhMMPv7QZUnnpnHLbDPJJwAFQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","Header","Footer","Alert","ThemeToggle","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","sensorData","setSensorData","temperatura","luminosidade","umidade","loading","setLoading","darkMode","setDarkMode","alerts","setAlerts","checkConditionsAndCreateAlerts","data","newAlerts","push","id","type","message","toggleTheme","timer","setTimeout","dataTimer","setInterval","newData","parseFloat","Math","random","toFixed","floor","clearTimeout","clearInterval","teamMembers","appClassName","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","map","alert","members","_c","$RefreshReg$"],"sources":["/Users/dudaalves/iot-agro/src/App.js"],"sourcesContent":["// App.js - Com controle de tema simplificado\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Alert from './components/Alert';\nimport ThemeToggle from './components/ThemeToggle';\n\nfunction App() {\n  const [sensorData, setSensorData] = useState({\n    temperatura: 25.4,\n    luminosidade: 850,\n    umidade: 68\n  });\n  const [loading, setLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [alerts, setAlerts] = useState([]);\n\n  // Função para verificar condições e gerar alertas\n  const checkConditionsAndCreateAlerts = (data) => {\n    const newAlerts = [];\n    \n    // Verificar temperatura > 30\n    if (data.temperatura > 30) {\n      newAlerts.push({\n        id: 'temp-high',\n        type: 'danger',\n        message: `Alerta: Temperatura alta (${data.temperatura}°C)! Acima de 30°C.`\n      });\n    }\n    \n    // Verificar umidade < 50% ou < 30%\n    if (data.umidade < 30) {\n      newAlerts.push({\n        id: 'humidity-very-low',\n        type: 'danger',\n        message: `Alerta: Umidade crítica (${data.umidade}%)! Abaixo de 30%.`\n      });\n    } else if (data.umidade < 50) {\n      newAlerts.push({\n        id: 'humidity-low',\n        type: 'warning',\n        message: `Atenção: Umidade baixa (${data.umidade}%)! Abaixo de 50%.`\n      });\n    }\n    \n    // Alertas para luminosidade\n    if (data.luminosidade < 100) {\n      newAlerts.push({\n        id: 'low-light',\n        type: 'warning',\n        message: `Atenção: Pouca luz (${data.luminosidade} lux)! Abaixo de 100 lux.`\n      });\n    } else if (data.luminosidade > 1000) {\n      newAlerts.push({\n        id: 'high-light',\n        type: 'warning',\n        message: `Atenção: Muita luz (${data.luminosidade} lux)! Acima de 1000 lux.`\n      });\n    }\n    \n    setAlerts(newAlerts);\n  };\n\n  // Toggle simples do tema\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  };\n\n  useEffect(() => {\n    // Simulação de carregamento para demonstração\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n    \n    // Simulação de atualização de dados em tempo real\n    const dataTimer = setInterval(() => {\n      const newData = {\n        temperatura: parseFloat((Math.random() * 15 + 20).toFixed(1)), // Entre 20 e 35\n        luminosidade: Math.floor(Math.random() * 1500), // Entre 0 e 1500\n        umidade: Math.floor(Math.random() * 80 + 10), // Entre 10 e 90\n      };\n      \n      setSensorData(newData);\n      checkConditionsAndCreateAlerts(newData);\n    }, 5000);\n\n    // Tente configurar o Firebase (comentado para fins de depuração)\n    /*\n    try {\n      // Configuração do Firebase\n      const firebaseConfig = {\n        apiKey: \"YOUR_API_KEY\",\n        authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n        databaseURL: \"https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com\",\n        projectId: \"YOUR_PROJECT_ID\",\n        storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n        messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n        appId: \"YOUR_APP_ID\"\n      };\n\n      // Inicializa o Firebase\n      const app = initializeApp(firebaseConfig);\n      const database = getDatabase(app);\n      const sensoresRef = ref(database, 'sensores');\n\n      // Escuta por mudanças no nó 'sensores' do Realtime Database\n      const unsubscribe = onValue(sensoresRef, (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n          setSensorData(data);\n          checkConditionsAndCreateAlerts(data);\n        }\n        setLoading(false);\n      });\n\n      // Função de limpeza para desinscrever quando o componente for desmontado\n      return () => {\n        unsubscribe();\n        clearTimeout(timer);\n        clearInterval(dataTimer);\n      };\n    } catch (error) {\n      console.error(\"Erro ao configurar Firebase:\", error);\n      setLoading(false);\n    }\n    */\n\n    // Verificar condições iniciais\n    checkConditionsAndCreateAlerts(sensorData);\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(dataTimer);\n    };\n  }, []);\n\n  const teamMembers = [\n    'Ana',\n    'Evellyn',\n    'Hobedes',\n    'Moacir',\n    'Pedro',\n    'Thiago'\n  ];\n\n  // Classe condicional para o tema escuro\n  const appClassName = `app ${darkMode ? 'dark-mode' : ''}`;\n\n  return (\n    <div className={appClassName}>\n      <Header title=\"IoT Agro\" darkMode={darkMode} />\n      \n      <main className=\"main-content\">\n        {/* Exibir alertas */}\n        <div className=\"alerts-container\">\n          {alerts.map(alert => (\n            <Alert \n              key={alert.id}\n              type={alert.type}\n              message={alert.message}\n            />\n          ))}\n        </div>\n\n        {loading ? (\n          <div className=\"loading\">Carregando dados dos sensores...</div>\n        ) : (\n          <>\n            <Dashboard data={sensorData} darkMode={darkMode} />\n            \n            {/* Botão de tema posicionado após o dashboard, alinhado à direita */}\n            <div className=\"theme-toggle-wrapper\">\n              <ThemeToggle darkMode={darkMode} toggleTheme={toggleTheme} />\n            </div>\n          </>\n        )}\n      </main>\n      <Footer members={teamMembers} darkMode={darkMode} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}