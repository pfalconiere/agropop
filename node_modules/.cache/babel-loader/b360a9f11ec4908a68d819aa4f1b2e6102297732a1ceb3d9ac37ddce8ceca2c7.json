{"ast":null,"code":"// src/firebase/firebaseConfig.js\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, onValue, set, get } from 'firebase/database';\n\n// Configuração do Firebase\nconst firebaseConfig = {\n  databaseURL: \"https://mes2025-1-thunderbolts-default-rtdb.firebaseio.com/\"\n  // Não precisamos de outras configurações já que estamos usando o token legado\n};\n\n// Inicializar o Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Obter uma referência ao banco de dados\nconst database = getDatabase(app);\n\n// Função para ler dados do Firebase com autenticação\nexport const subscribeToSensorData = callback => {\n  const sensoresRef = ref(database, '/test/int');\n\n  // Ouvir mudanças nos dados dos sensores\n  const unsubscribe = onValue(sensoresRef, snapshot => {\n    const data = snapshot.val();\n    console.log('TEM DATA?: ' + data);\n    if (data) {\n      callback(data);\n      console.log('TEM DATA?: ' + data);\n    } else {\n      console.log(\"Não há dados disponíveis nos sensores.\");\n      // Enviar dados padrão se não houver dados\n      callback({\n        temperatura: 0,\n        umidade: 0,\n        luminosidade: 0\n      });\n    }\n  }, error => {\n    console.error(\"Erro ao ler dados:\", error);\n  });\n\n  // Retornar função para desinscrever\n  return unsubscribe;\n};\n\n// Função para ler um valor específico uma única vez\nexport const readFirebaseData = async path => {\n  try {\n    const dataRef = ref(database, path);\n    const snapshot = await get(dataRef);\n    if (snapshot.exists()) {\n      return snapshot.val();\n    } else {\n      console.log(\"Não há dados disponíveis no caminho:\", path);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Erro ao ler dados:\", error);\n    return null;\n  }\n};\n\n// Função para gravar dados no Firebase\nexport const writeFirebaseData = async (path, data) => {\n  try {\n    const dataRef = ref(database, path);\n    await set(dataRef, data);\n    return true;\n  } catch (error) {\n    console.error(\"Erro ao gravar dados:\", error);\n    return false;\n  }\n};\nexport { database };","map":{"version":3,"names":["initializeApp","getDatabase","ref","onValue","set","get","firebaseConfig","databaseURL","app","database","subscribeToSensorData","callback","sensoresRef","unsubscribe","snapshot","data","val","console","log","temperatura","umidade","luminosidade","error","readFirebaseData","path","dataRef","exists","writeFirebaseData"],"sources":["/Users/dudaalves/iot-agro/src/firebase/firebaseConfig.js"],"sourcesContent":["// src/firebase/firebaseConfig.js\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, onValue, set, get } from 'firebase/database';\n\n// Configuração do Firebase\nconst firebaseConfig = {\n  databaseURL: \"https://mes2025-1-thunderbolts-default-rtdb.firebaseio.com/\",\n  // Não precisamos de outras configurações já que estamos usando o token legado\n};\n\n// Inicializar o Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Obter uma referência ao banco de dados\nconst database = getDatabase(app);\n\n// Função para ler dados do Firebase com autenticação\nexport const subscribeToSensorData = (callback) => {\n  const sensoresRef = ref(database, '/test/int');\n  \n  // Ouvir mudanças nos dados dos sensores\n  const unsubscribe = onValue(sensoresRef, (snapshot) => {\n    const data = snapshot.val();\n    console.log('TEM DATA?: ' + data)\n    if (data) {\n      callback(data);\n      console.log('TEM DATA?: ' + data)\n    } else {\n      console.log(\"Não há dados disponíveis nos sensores.\");\n      // Enviar dados padrão se não houver dados\n      callback({\n        temperatura: 0,\n        umidade: 0,\n        luminosidade: 0\n      });\n    }\n  }, (error) => {\n    console.error(\"Erro ao ler dados:\", error);\n  });\n  \n  // Retornar função para desinscrever\n  return unsubscribe;\n};\n\n// Função para ler um valor específico uma única vez\nexport const readFirebaseData = async (path) => {\n  try {\n    const dataRef = ref(database, path);\n    const snapshot = await get(dataRef);\n    \n    if (snapshot.exists()) {\n      return snapshot.val();\n    } else {\n      console.log(\"Não há dados disponíveis no caminho:\", path);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Erro ao ler dados:\", error);\n    return null;\n  }\n};\n\n// Função para gravar dados no Firebase\nexport const writeFirebaseData = async (path, data) => {\n  try {\n    const dataRef = ref(database, path);\n    await set(dataRef, data);\n    return true;\n  } catch (error) {\n    console.error(\"Erro ao gravar dados:\", error);\n    return false;\n  }\n};\n\nexport { database };"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,WAAW,EAAEC,GAAG,EAAEC,OAAO,EAAEC,GAAG,EAAEC,GAAG,QAAQ,mBAAmB;;AAEvE;AACA,MAAMC,cAAc,GAAG;EACrBC,WAAW,EAAE;EACb;AACF,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGR,aAAa,CAACM,cAAc,CAAC;;AAEzC;AACA,MAAMG,QAAQ,GAAGR,WAAW,CAACO,GAAG,CAAC;;AAEjC;AACA,OAAO,MAAME,qBAAqB,GAAIC,QAAQ,IAAK;EACjD,MAAMC,WAAW,GAAGV,GAAG,CAACO,QAAQ,EAAE,WAAW,CAAC;;EAE9C;EACA,MAAMI,WAAW,GAAGV,OAAO,CAACS,WAAW,EAAGE,QAAQ,IAAK;IACrD,MAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;IAC3BC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGH,IAAI,CAAC;IACjC,IAAIA,IAAI,EAAE;MACRJ,QAAQ,CAACI,IAAI,CAAC;MACdE,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGH,IAAI,CAAC;IACnC,CAAC,MAAM;MACLE,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACrD;MACAP,QAAQ,CAAC;QACPQ,WAAW,EAAE,CAAC;QACdC,OAAO,EAAE,CAAC;QACVC,YAAY,EAAE;MAChB,CAAC,CAAC;IACJ;EACF,CAAC,EAAGC,KAAK,IAAK;IACZL,OAAO,CAACK,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC5C,CAAC,CAAC;;EAEF;EACA,OAAOT,WAAW;AACpB,CAAC;;AAED;AACA,OAAO,MAAMU,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,IAAI;IACF,MAAMC,OAAO,GAAGvB,GAAG,CAACO,QAAQ,EAAEe,IAAI,CAAC;IACnC,MAAMV,QAAQ,GAAG,MAAMT,GAAG,CAACoB,OAAO,CAAC;IAEnC,IAAIX,QAAQ,CAACY,MAAM,CAAC,CAAC,EAAE;MACrB,OAAOZ,QAAQ,CAACE,GAAG,CAAC,CAAC;IACvB,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEM,IAAI,CAAC;MACzD,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAOH,IAAI,EAAET,IAAI,KAAK;EACrD,IAAI;IACF,MAAMU,OAAO,GAAGvB,GAAG,CAACO,QAAQ,EAAEe,IAAI,CAAC;IACnC,MAAMpB,GAAG,CAACqB,OAAO,EAAEV,IAAI,CAAC;IACxB,OAAO,IAAI;EACb,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,KAAK;EACd;AACF,CAAC;AAED,SAASb,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}