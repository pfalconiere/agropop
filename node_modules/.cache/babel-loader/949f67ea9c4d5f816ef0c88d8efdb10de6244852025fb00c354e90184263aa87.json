{"ast":null,"code":"var _jsxFileName = \"/Users/dudaalves/iot-agro/src/components/Dashboard.js\";\n// components/Dashboard.js com níveis de qualidade\nimport React from 'react';\nimport SensorCard from './SensorCard';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  data,\n  darkMode,\n  limites,\n  culturaSelecionada\n}) => {\n  // Função para avaliar a qualidade do valor baseado nos níveis da cultura\n  const getQualidade = (tipo, valor) => {\n    if (!culturaSelecionada) return {\n      nivel: 'none',\n      mensagem: null\n    };\n    const niveis = culturaSelecionada.niveis[tipo];\n\n    // Casos especiais para temperatura (valores ótimos podem ser menores que valores ruins)\n    if (tipo === 'temperatura') {\n      if (valor <= niveis.otimo) return {\n        nivel: 'otimo',\n        mensagem: 'Temperatura ótima'\n      };\n      if (valor <= niveis.bom) return {\n        nivel: 'bom',\n        mensagem: 'Temperatura boa'\n      };\n      if (valor <= niveis.regular) return {\n        nivel: 'regular',\n        mensagem: 'Temperatura regular'\n      };\n      return {\n        nivel: 'ruim',\n        mensagem: 'Temperatura ruim'\n      };\n    }\n\n    // Para umidade e luminosidade (valores ótimos são maiores que valores ruins)\n    if (valor >= niveis.otimo) return {\n      nivel: 'otimo',\n      mensagem: `${tipo === 'umidade' ? 'Umidade ótima' : 'Luminosidade ótima'}`\n    };\n    if (valor >= niveis.bom) return {\n      nivel: 'bom',\n      mensagem: `${tipo === 'umidade' ? 'Umidade boa' : 'Luminosidade boa'}`\n    };\n    if (valor >= niveis.regular) return {\n      nivel: 'regular',\n      mensagem: `${tipo === 'umidade' ? 'Umidade regular' : 'Luminosidade regular'}`\n    };\n    return {\n      nivel: 'ruim',\n      mensagem: `${tipo === 'umidade' ? 'Umidade ruim' : 'Luminosidade ruim'}`\n    };\n  };\n\n  // Determinar qualidade para cada sensor\n  const temperaturaQualidade = culturaSelecionada ? getQualidade('temperatura', data.temperatura) : {\n    nivel: 'none',\n    mensagem: null\n  };\n  const luminosidadeQualidade = culturaSelecionada ? getQualidade('luminosidade', data.luminosidade) : {\n    nivel: 'none',\n    mensagem: null\n  };\n  const umidadeQualidade = culturaSelecionada ? getQualidade('umidade', data.umidade) : {\n    nivel: 'none',\n    mensagem: null\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `dashboard ${darkMode ? 'dark-mode' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-grid\",\n      children: [/*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"Temperatura\",\n        value: data.temperatura,\n        unit: \"\\xB0C\",\n        icon: \"temperature\",\n        color: \"#FF5733\",\n        qualidadeNivel: temperaturaQualidade.nivel,\n        qualidadeMensagem: temperaturaQualidade.mensagem,\n        limites: limites.temperatura,\n        niveis: culturaSelecionada === null || culturaSelecionada === void 0 ? void 0 : culturaSelecionada.niveis.temperatura,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"Luminosidade\",\n        value: data.luminosidade,\n        unit: \"lux\",\n        icon: \"light\",\n        color: \"#FFC300\",\n        qualidadeNivel: luminosidadeQualidade.nivel,\n        qualidadeMensagem: luminosidadeQualidade.mensagem,\n        limites: limites.luminosidade,\n        niveis: culturaSelecionada === null || culturaSelecionada === void 0 ? void 0 : culturaSelecionada.niveis.luminosidade,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"Umidade\",\n        value: data.umidade,\n        unit: \"%\",\n        icon: \"humidity\",\n        color: \"#33A1FF\",\n        qualidadeNivel: umidadeQualidade.nivel,\n        qualidadeMensagem: umidadeQualidade.mensagem,\n        limites: limites.umidade,\n        niveis: culturaSelecionada === null || culturaSelecionada === void 0 ? void 0 : culturaSelecionada.niveis.umidade,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","SensorCard","jsxDEV","_jsxDEV","Dashboard","data","darkMode","limites","culturaSelecionada","getQualidade","tipo","valor","nivel","mensagem","niveis","otimo","bom","regular","temperaturaQualidade","temperatura","luminosidadeQualidade","luminosidade","umidadeQualidade","umidade","className","children","title","value","unit","icon","color","qualidadeNivel","qualidadeMensagem","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dudaalves/iot-agro/src/components/Dashboard.js"],"sourcesContent":["// components/Dashboard.js com níveis de qualidade\nimport React from 'react';\nimport SensorCard from './SensorCard';\nimport './Dashboard.css';\n\nconst Dashboard = ({ data, darkMode, limites, culturaSelecionada }) => {\n  // Função para avaliar a qualidade do valor baseado nos níveis da cultura\n  const getQualidade = (tipo, valor) => {\n    if (!culturaSelecionada) return { nivel: 'none', mensagem: null };\n    \n    const niveis = culturaSelecionada.niveis[tipo];\n    \n    // Casos especiais para temperatura (valores ótimos podem ser menores que valores ruins)\n    if (tipo === 'temperatura') {\n      if (valor <= niveis.otimo) return { nivel: 'otimo', mensagem: 'Temperatura ótima' };\n      if (valor <= niveis.bom) return { nivel: 'bom', mensagem: 'Temperatura boa' };\n      if (valor <= niveis.regular) return { nivel: 'regular', mensagem: 'Temperatura regular' };\n      return { nivel: 'ruim', mensagem: 'Temperatura ruim' };\n    }\n    \n    // Para umidade e luminosidade (valores ótimos são maiores que valores ruins)\n    if (valor >= niveis.otimo) return { nivel: 'otimo', mensagem: `${tipo === 'umidade' ? 'Umidade ótima' : 'Luminosidade ótima'}` };\n    if (valor >= niveis.bom) return { nivel: 'bom', mensagem: `${tipo === 'umidade' ? 'Umidade boa' : 'Luminosidade boa'}` };\n    if (valor >= niveis.regular) return { nivel: 'regular', mensagem: `${tipo === 'umidade' ? 'Umidade regular' : 'Luminosidade regular'}` };\n    return { nivel: 'ruim', mensagem: `${tipo === 'umidade' ? 'Umidade ruim' : 'Luminosidade ruim'}` };\n  };\n\n  // Determinar qualidade para cada sensor\n  const temperaturaQualidade = culturaSelecionada ? getQualidade('temperatura', data.temperatura) : { nivel: 'none', mensagem: null };\n  const luminosidadeQualidade = culturaSelecionada ? getQualidade('luminosidade', data.luminosidade) : { nivel: 'none', mensagem: null };\n  const umidadeQualidade = culturaSelecionada ? getQualidade('umidade', data.umidade) : { nivel: 'none', mensagem: null };\n\n  return (\n    <div className={`dashboard ${darkMode ? 'dark-mode' : ''}`}>      \n      <div className=\"dashboard-grid\">\n        <SensorCard \n          title=\"Temperatura\" \n          value={data.temperatura} \n          unit=\"°C\" \n          icon=\"temperature\"\n          color=\"#FF5733\"\n          qualidadeNivel={temperaturaQualidade.nivel}\n          qualidadeMensagem={temperaturaQualidade.mensagem}\n          limites={limites.temperatura}\n          niveis={culturaSelecionada?.niveis.temperatura}\n          darkMode={darkMode}\n        />\n        <SensorCard \n          title=\"Luminosidade\" \n          value={data.luminosidade} \n          unit=\"lux\" \n          icon=\"light\"\n          color=\"#FFC300\"\n          qualidadeNivel={luminosidadeQualidade.nivel}\n          qualidadeMensagem={luminosidadeQualidade.mensagem}\n          limites={limites.luminosidade}\n          niveis={culturaSelecionada?.niveis.luminosidade}\n          darkMode={darkMode}\n        />\n        <SensorCard \n          title=\"Umidade\" \n          value={data.umidade} \n          unit=\"%\" \n          icon=\"humidity\"\n          color=\"#33A1FF\"\n          qualidadeNivel={umidadeQualidade.nivel}\n          qualidadeMensagem={umidadeQualidade.mensagem}\n          limites={limites.umidade}\n          niveis={culturaSelecionada?.niveis.umidade}\n          darkMode={darkMode}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}