{"ast":null,"code":"var _jsxFileName = \"/Users/dudaalves/iot-agro/src/components/Dashboard.js\";\n// components/Dashboard.js com limites das culturas\nimport React from 'react';\nimport SensorCard from './SensorCard';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  data,\n  darkMode,\n  limites\n}) => {\n  // Determinar os níveis de alerta para cada sensor com base nos limites\n  const getTempAlertLevel = value => {\n    if (value < limites.temperatura.min) return 'low';\n    if (value > limites.temperatura.max) return 'high';\n    return 'none';\n  };\n  const getHumidityAlertLevel = value => {\n    if (value < limites.umidade.min) return 'low';\n    if (value > limites.umidade.max) return 'high';\n    return 'none';\n  };\n  const getLightAlertLevel = value => {\n    if (value < limites.luminosidade.min) return 'low';\n    if (value > limites.luminosidade.max) return 'high';\n    return 'none';\n  };\n\n  // Determinar as mensagens de alerta\n  const getTempAlertMessage = value => {\n    if (value < limites.temperatura.min) return \"Temperatura baixa\";\n    if (value > limites.temperatura.max) return \"Temperatura alta\";\n    return null;\n  };\n  const getHumidityAlertMessage = value => {\n    if (value < limites.umidade.min) return \"Umidade baixa\";\n    if (value > limites.umidade.max) return \"Umidade alta\";\n    return null;\n  };\n  const getLightAlertMessage = value => {\n    if (value < limites.luminosidade.min) return \"Pouca luz\";\n    if (value > limites.luminosidade.max) return \"Muita luz\";\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `dashboard ${darkMode ? 'dark-mode' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-grid\",\n      children: [/*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"Temperatura\",\n        value: data.temperatura,\n        unit: \"\\xB0C\",\n        icon: \"temperature\",\n        color: \"#FF5733\",\n        alertLevel: getTempAlertLevel(data.temperatura),\n        alertMessage: getTempAlertMessage(data.temperatura),\n        limites: limites.temperatura,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"Luminosidade\",\n        value: data.luminosidade,\n        unit: \"lux\",\n        icon: \"light\",\n        color: \"#FFC300\",\n        alertLevel: getLightAlertLevel(data.luminosidade),\n        alertMessage: getLightAlertMessage(data.luminosidade),\n        limites: limites.luminosidade,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"Umidade\",\n        value: data.umidade,\n        unit: \"%\",\n        icon: \"humidity\",\n        color: \"#33A1FF\",\n        alertLevel: getHumidityAlertLevel(data.umidade),\n        alertMessage: getHumidityAlertMessage(data.umidade),\n        limites: limites.umidade,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","SensorCard","jsxDEV","_jsxDEV","Dashboard","data","darkMode","limites","getTempAlertLevel","value","temperatura","min","max","getHumidityAlertLevel","umidade","getLightAlertLevel","luminosidade","getTempAlertMessage","getHumidityAlertMessage","getLightAlertMessage","className","children","title","unit","icon","color","alertLevel","alertMessage","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dudaalves/iot-agro/src/components/Dashboard.js"],"sourcesContent":["// components/Dashboard.js com limites das culturas\nimport React from 'react';\nimport SensorCard from './SensorCard';\nimport './Dashboard.css';\n\nconst Dashboard = ({ data, darkMode, limites }) => {\n  // Determinar os níveis de alerta para cada sensor com base nos limites\n  const getTempAlertLevel = (value) => {\n    if (value < limites.temperatura.min) return 'low';\n    if (value > limites.temperatura.max) return 'high';\n    return 'none';\n  };\n  \n  const getHumidityAlertLevel = (value) => {\n    if (value < limites.umidade.min) return 'low';\n    if (value > limites.umidade.max) return 'high';\n    return 'none';\n  };\n  \n  const getLightAlertLevel = (value) => {\n    if (value < limites.luminosidade.min) return 'low';\n    if (value > limites.luminosidade.max) return 'high';\n    return 'none';\n  };\n\n  // Determinar as mensagens de alerta\n  const getTempAlertMessage = (value) => {\n    if (value < limites.temperatura.min) return \"Temperatura baixa\";\n    if (value > limites.temperatura.max) return \"Temperatura alta\";\n    return null;\n  };\n  \n  const getHumidityAlertMessage = (value) => {\n    if (value < limites.umidade.min) return \"Umidade baixa\";\n    if (value > limites.umidade.max) return \"Umidade alta\";\n    return null;\n  };\n  \n  const getLightAlertMessage = (value) => {\n    if (value < limites.luminosidade.min) return \"Pouca luz\";\n    if (value > limites.luminosidade.max) return \"Muita luz\";\n    return null;\n  };\n\n  return (\n    <div className={`dashboard ${darkMode ? 'dark-mode' : ''}`}>      \n      <div className=\"dashboard-grid\">\n        <SensorCard \n          title=\"Temperatura\" \n          value={data.temperatura} \n          unit=\"°C\" \n          icon=\"temperature\"\n          color=\"#FF5733\"\n          alertLevel={getTempAlertLevel(data.temperatura)}\n          alertMessage={getTempAlertMessage(data.temperatura)}\n          limites={limites.temperatura}\n          darkMode={darkMode}\n        />\n        <SensorCard \n          title=\"Luminosidade\" \n          value={data.luminosidade} \n          unit=\"lux\" \n          icon=\"light\"\n          color=\"#FFC300\"\n          alertLevel={getLightAlertLevel(data.luminosidade)}\n          alertMessage={getLightAlertMessage(data.luminosidade)}\n          limites={limites.luminosidade}\n          darkMode={darkMode}\n        />\n        <SensorCard \n          title=\"Umidade\" \n          value={data.umidade} \n          unit=\"%\" \n          icon=\"humidity\"\n          color=\"#33A1FF\"\n          alertLevel={getHumidityAlertLevel(data.umidade)}\n          alertMessage={getHumidityAlertMessage(data.umidade)}\n          limites={limites.umidade}\n          darkMode={darkMode}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,KAAK;EACjD;EACA,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACnC,IAAIA,KAAK,GAAGF,OAAO,CAACG,WAAW,CAACC,GAAG,EAAE,OAAO,KAAK;IACjD,IAAIF,KAAK,GAAGF,OAAO,CAACG,WAAW,CAACE,GAAG,EAAE,OAAO,MAAM;IAClD,OAAO,MAAM;EACf,CAAC;EAED,MAAMC,qBAAqB,GAAIJ,KAAK,IAAK;IACvC,IAAIA,KAAK,GAAGF,OAAO,CAACO,OAAO,CAACH,GAAG,EAAE,OAAO,KAAK;IAC7C,IAAIF,KAAK,GAAGF,OAAO,CAACO,OAAO,CAACF,GAAG,EAAE,OAAO,MAAM;IAC9C,OAAO,MAAM;EACf,CAAC;EAED,MAAMG,kBAAkB,GAAIN,KAAK,IAAK;IACpC,IAAIA,KAAK,GAAGF,OAAO,CAACS,YAAY,CAACL,GAAG,EAAE,OAAO,KAAK;IAClD,IAAIF,KAAK,GAAGF,OAAO,CAACS,YAAY,CAACJ,GAAG,EAAE,OAAO,MAAM;IACnD,OAAO,MAAM;EACf,CAAC;;EAED;EACA,MAAMK,mBAAmB,GAAIR,KAAK,IAAK;IACrC,IAAIA,KAAK,GAAGF,OAAO,CAACG,WAAW,CAACC,GAAG,EAAE,OAAO,mBAAmB;IAC/D,IAAIF,KAAK,GAAGF,OAAO,CAACG,WAAW,CAACE,GAAG,EAAE,OAAO,kBAAkB;IAC9D,OAAO,IAAI;EACb,CAAC;EAED,MAAMM,uBAAuB,GAAIT,KAAK,IAAK;IACzC,IAAIA,KAAK,GAAGF,OAAO,CAACO,OAAO,CAACH,GAAG,EAAE,OAAO,eAAe;IACvD,IAAIF,KAAK,GAAGF,OAAO,CAACO,OAAO,CAACF,GAAG,EAAE,OAAO,cAAc;IACtD,OAAO,IAAI;EACb,CAAC;EAED,MAAMO,oBAAoB,GAAIV,KAAK,IAAK;IACtC,IAAIA,KAAK,GAAGF,OAAO,CAACS,YAAY,CAACL,GAAG,EAAE,OAAO,WAAW;IACxD,IAAIF,KAAK,GAAGF,OAAO,CAACS,YAAY,CAACJ,GAAG,EAAE,OAAO,WAAW;IACxD,OAAO,IAAI;EACb,CAAC;EAED,oBACET,OAAA;IAAKiB,SAAS,EAAE,aAAad,QAAQ,GAAG,WAAW,GAAG,EAAE,EAAG;IAAAe,QAAA,eACzDlB,OAAA;MAAKiB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BlB,OAAA,CAACF,UAAU;QACTqB,KAAK,EAAC,aAAa;QACnBb,KAAK,EAAEJ,IAAI,CAACK,WAAY;QACxBa,IAAI,EAAC,OAAI;QACTC,IAAI,EAAC,aAAa;QAClBC,KAAK,EAAC,SAAS;QACfC,UAAU,EAAElB,iBAAiB,CAACH,IAAI,CAACK,WAAW,CAAE;QAChDiB,YAAY,EAAEV,mBAAmB,CAACZ,IAAI,CAACK,WAAW,CAAE;QACpDH,OAAO,EAAEA,OAAO,CAACG,WAAY;QAC7BJ,QAAQ,EAAEA;MAAS;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC,eACF5B,OAAA,CAACF,UAAU;QACTqB,KAAK,EAAC,cAAc;QACpBb,KAAK,EAAEJ,IAAI,CAACW,YAAa;QACzBO,IAAI,EAAC,KAAK;QACVC,IAAI,EAAC,OAAO;QACZC,KAAK,EAAC,SAAS;QACfC,UAAU,EAAEX,kBAAkB,CAACV,IAAI,CAACW,YAAY,CAAE;QAClDW,YAAY,EAAER,oBAAoB,CAACd,IAAI,CAACW,YAAY,CAAE;QACtDT,OAAO,EAAEA,OAAO,CAACS,YAAa;QAC9BV,QAAQ,EAAEA;MAAS;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC,eACF5B,OAAA,CAACF,UAAU;QACTqB,KAAK,EAAC,SAAS;QACfb,KAAK,EAAEJ,IAAI,CAACS,OAAQ;QACpBS,IAAI,EAAC,GAAG;QACRC,IAAI,EAAC,UAAU;QACfC,KAAK,EAAC,SAAS;QACfC,UAAU,EAAEb,qBAAqB,CAACR,IAAI,CAACS,OAAO,CAAE;QAChDa,YAAY,EAAET,uBAAuB,CAACb,IAAI,CAACS,OAAO,CAAE;QACpDP,OAAO,EAAEA,OAAO,CAACO,OAAQ;QACzBR,QAAQ,EAAEA;MAAS;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACC,EAAA,GA9EI5B,SAAS;AAgFf,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}