{"ast":null,"code":"var _jsxFileName = \"/Users/dudaalves/iot-agro/src/App.js\",\n  _s = $RefreshSig$();\n// App.js - Com seletor de cultura usando dados reais\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Alert from './components/Alert';\nimport CulturaSelector from './components/CulturaSelector';\nimport culturasData from './data/culturasData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    temperatura: 25.4,\n    luminosidade: 850,\n    umidade: 68\n  });\n  const [loading, setLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [alerts, setAlerts] = useState([]);\n  const [culturaSelecionada, setCulturaSelecionada] = useState(null);\n\n  // Definir limites padrão (serão substituídos pela cultura selecionada)\n  const [limites, setLimites] = useState({\n    temperatura: {\n      min: 20,\n      max: 40\n    },\n    luminosidade: {\n      min: 3000,\n      max: 10000\n    },\n    umidade: {\n      min: 30,\n      max: 75\n    }\n  });\n\n  // Função para lidar com a mudança de cultura\n  const handleCulturaChange = cultura => {\n    setCulturaSelecionada(cultura);\n    setLimites(cultura.limites);\n  };\n\n  // Função para avaliar a qualidade do valor baseado nos níveis da cultura\n  const getQualidadeValor = (tipo, valor) => {\n    if (!culturaSelecionada) return 'Desconhecido';\n    const niveis = culturaSelecionada.niveis[tipo];\n\n    // Casos especiais para temperatura (valores ótimos podem ser menores que valores ruins)\n    if (tipo === 'temperatura') {\n      if (valor <= niveis.otimo) return 'Ótimo';\n      if (valor <= niveis.bom) return 'Bom';\n      if (valor <= niveis.regular) return 'Regular';\n      return 'Ruim';\n    }\n\n    // Para umidade e luminosidade (valores ótimos são maiores que valores ruins)\n    if (valor >= niveis.otimo) return 'Ótimo';\n    if (valor >= niveis.bom) return 'Bom';\n    if (valor >= niveis.regular) return 'Regular';\n    return 'Ruim';\n  };\n\n  // Função para verificar condições e gerar alertas com base nos limites\n  const checkConditionsAndCreateAlerts = data => {\n    if (!culturaSelecionada) return;\n    const newAlerts = [];\n\n    // Classificar qualidade dos valores\n    const qualidadeTemp = getQualidadeValor('temperatura', data.temperatura);\n    const qualidadeLuz = getQualidadeValor('luminosidade', data.luminosidade);\n    const qualidadeUmid = getQualidadeValor('umidade', data.umidade);\n\n    // Gerar alertas apenas para Regular e Ruim\n    if (qualidadeTemp === 'Ruim') {\n      let mensagem = '';\n      if (data.temperatura < culturaSelecionada.niveis.temperatura.otimo) {\n        mensagem = `Alerta: Temperatura baixa (${data.temperatura}°C)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.temperatura.otimo}°C.`;\n      } else {\n        mensagem = `Alerta: Temperatura alta (${data.temperatura}°C)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.temperatura.otimo}°C.`;\n      }\n      newAlerts.push({\n        id: 'temp-alert',\n        type: 'danger',\n        message: mensagem\n      });\n    } else if (qualidadeTemp === 'Regular') {\n      newAlerts.push({\n        id: 'temp-warning',\n        type: 'warning',\n        message: `Atenção: Temperatura em nível regular (${data.temperatura}°C). Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.temperatura.otimo}°C.`\n      });\n    }\n\n    // Alertas para umidade\n    if (qualidadeUmid === 'Ruim') {\n      let mensagem = '';\n      if (data.umidade < culturaSelecionada.niveis.umidade.regular) {\n        mensagem = `Alerta: Umidade muito baixa (${data.umidade}%)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.umidade.otimo}%.`;\n      } else {\n        mensagem = `Alerta: Umidade muito alta (${data.umidade}%)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.umidade.otimo}%.`;\n      }\n      newAlerts.push({\n        id: 'humidity-alert',\n        type: 'danger',\n        message: mensagem\n      });\n    } else if (qualidadeUmid === 'Regular') {\n      newAlerts.push({\n        id: 'humidity-warning',\n        type: 'warning',\n        message: `Atenção: Umidade em nível regular (${data.umidade}%). Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.umidade.otimo}%.`\n      });\n    }\n\n    // Alertas para luminosidade\n    if (qualidadeLuz === 'Ruim') {\n      let mensagem = '';\n      if (data.luminosidade < culturaSelecionada.niveis.luminosidade.regular) {\n        mensagem = `Alerta: Luminosidade muito baixa (${data.luminosidade} lux)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.luminosidade.otimo} lux.`;\n      } else {\n        mensagem = `Alerta: Luminosidade muito alta (${data.luminosidade} lux)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.luminosidade.otimo} lux.`;\n      }\n      newAlerts.push({\n        id: 'light-alert',\n        type: 'danger',\n        message: mensagem\n      });\n    } else if (qualidadeLuz === 'Regular') {\n      newAlerts.push({\n        id: 'light-warning',\n        type: 'warning',\n        message: `Atenção: Luminosidade em nível regular (${data.luminosidade} lux). Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.luminosidade.otimo} lux.`\n      });\n    }\n    setAlerts(newAlerts);\n  };\n\n  // Toggle simples do tema\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  };\n  useEffect(() => {\n    // Definir a primeira cultura como padrão\n    if (culturasData.length > 0 && !culturaSelecionada) {\n      handleCulturaChange(culturasData[0]);\n    }\n\n    // Simulação de carregamento para demonstração\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n\n    // Simulação de atualização de dados em tempo real\n    const dataTimer = setInterval(() => {\n      const newData = {\n        temperatura: parseFloat((Math.random() * 20 + 15).toFixed(1)),\n        // Entre 15 e 35\n        luminosidade: Math.floor(Math.random() * 9000 + 1000),\n        // Entre 1000 e 10000\n        umidade: Math.floor(Math.random() * 60 + 20) // Entre 20 e 80\n      };\n      setSensorData(newData);\n      checkConditionsAndCreateAlerts(newData);\n    }, 5000);\n\n    // Tente configurar o Firebase (comentado para fins de depuração)\n    /*\n    try {\n      // Configuração do Firebase\n      const firebaseConfig = {\n        apiKey: \"YOUR_API_KEY\",\n        authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n        databaseURL: \"https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com\",\n        projectId: \"YOUR_PROJECT_ID\",\n        storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n        messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n        appId: \"YOUR_APP_ID\"\n      };\n       // Inicializa o Firebase\n      const app = initializeApp(firebaseConfig);\n      const database = getDatabase(app);\n      const sensoresRef = ref(database, 'sensores');\n       // Escuta por mudanças no nó 'sensores' do Realtime Database\n      const unsubscribe = onValue(sensoresRef, (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n          setSensorData(data);\n          checkConditionsAndCreateAlerts(data);\n        }\n        setLoading(false);\n      });\n       // Função de limpeza para desinscrever quando o componente for desmontado\n      return () => {\n        unsubscribe();\n        clearTimeout(timer);\n        clearInterval(dataTimer);\n      };\n    } catch (error) {\n      console.error(\"Erro ao configurar Firebase:\", error);\n      setLoading(false);\n    }\n    */\n\n    // Verificar condições iniciais\n    checkConditionsAndCreateAlerts(sensorData);\n    return () => {\n      clearTimeout(timer);\n      clearInterval(dataTimer);\n    };\n  }, [culturaSelecionada]); // Reexecutar quando a cultura mudar\n\n  const teamMembers = ['Ana', 'Evellyn', 'Hobedes', 'Moacir', 'Pedro', 'Thiago'];\n\n  // Classe condicional para o tema escuro\n  const appClassName = `app ${darkMode ? 'dark-mode' : ''}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: appClassName,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"AGROPOP\",\n      darkMode: darkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(CulturaSelector, {\n        culturaSelecionada: culturaSelecionada,\n        onCulturaChange: handleCulturaChange,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alerts-container\",\n        children: alerts.map(alert => /*#__PURE__*/_jsxDEV(Alert, {\n          type: alert.type,\n          message: alert.message\n        }, alert.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Carregando dados dos sensores...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n        data: sensorData,\n        darkMode: darkMode,\n        limites: limites,\n        culturaSelecionada: culturaSelecionada\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      members: teamMembers,\n      darkMode: darkMode,\n      toggleTheme: toggleTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LeY958BpG/ouRBc1ratxwOM90O8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","Header","Footer","Alert","CulturaSelector","culturasData","jsxDEV","_jsxDEV","App","_s","sensorData","setSensorData","temperatura","luminosidade","umidade","loading","setLoading","darkMode","setDarkMode","alerts","setAlerts","culturaSelecionada","setCulturaSelecionada","limites","setLimites","min","max","handleCulturaChange","cultura","getQualidadeValor","tipo","valor","niveis","otimo","bom","regular","checkConditionsAndCreateAlerts","data","newAlerts","qualidadeTemp","qualidadeLuz","qualidadeUmid","mensagem","nome","push","id","type","message","toggleTheme","length","timer","setTimeout","dataTimer","setInterval","newData","parseFloat","Math","random","toFixed","floor","clearTimeout","clearInterval","teamMembers","appClassName","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","onCulturaChange","map","alert","members","_c","$RefreshReg$"],"sources":["/Users/dudaalves/iot-agro/src/App.js"],"sourcesContent":["// App.js - Com seletor de cultura usando dados reais\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Alert from './components/Alert';\nimport CulturaSelector from './components/CulturaSelector';\nimport culturasData from './data/culturasData';\n\nfunction App() {\n  const [sensorData, setSensorData] = useState({\n    temperatura: 25.4,\n    luminosidade: 850,\n    umidade: 68\n  });\n  const [loading, setLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [alerts, setAlerts] = useState([]);\n  const [culturaSelecionada, setCulturaSelecionada] = useState(null);\n  \n  // Definir limites padrão (serão substituídos pela cultura selecionada)\n  const [limites, setLimites] = useState({\n    temperatura: { min: 20, max: 40 },\n    luminosidade: { min: 3000, max: 10000 },\n    umidade: { min: 30, max: 75 }\n  });\n\n  // Função para lidar com a mudança de cultura\n  const handleCulturaChange = (cultura) => {\n    setCulturaSelecionada(cultura);\n    setLimites(cultura.limites);\n  };\n\n  // Função para avaliar a qualidade do valor baseado nos níveis da cultura\n  const getQualidadeValor = (tipo, valor) => {\n    if (!culturaSelecionada) return 'Desconhecido';\n    \n    const niveis = culturaSelecionada.niveis[tipo];\n    \n    // Casos especiais para temperatura (valores ótimos podem ser menores que valores ruins)\n    if (tipo === 'temperatura') {\n      if (valor <= niveis.otimo) return 'Ótimo';\n      if (valor <= niveis.bom) return 'Bom';\n      if (valor <= niveis.regular) return 'Regular';\n      return 'Ruim';\n    }\n    \n    // Para umidade e luminosidade (valores ótimos são maiores que valores ruins)\n    if (valor >= niveis.otimo) return 'Ótimo';\n    if (valor >= niveis.bom) return 'Bom';\n    if (valor >= niveis.regular) return 'Regular';\n    return 'Ruim';\n  };\n\n  // Função para verificar condições e gerar alertas com base nos limites\n  const checkConditionsAndCreateAlerts = (data) => {\n    if (!culturaSelecionada) return;\n    \n    const newAlerts = [];\n    \n    // Classificar qualidade dos valores\n    const qualidadeTemp = getQualidadeValor('temperatura', data.temperatura);\n    const qualidadeLuz = getQualidadeValor('luminosidade', data.luminosidade);\n    const qualidadeUmid = getQualidadeValor('umidade', data.umidade);\n    \n    // Gerar alertas apenas para Regular e Ruim\n    if (qualidadeTemp === 'Ruim') {\n      let mensagem = '';\n      if (data.temperatura < culturaSelecionada.niveis.temperatura.otimo) {\n        mensagem = `Alerta: Temperatura baixa (${data.temperatura}°C)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.temperatura.otimo}°C.`;\n      } else {\n        mensagem = `Alerta: Temperatura alta (${data.temperatura}°C)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.temperatura.otimo}°C.`;\n      }\n      \n      newAlerts.push({\n        id: 'temp-alert',\n        type: 'danger',\n        message: mensagem\n      });\n    } else if (qualidadeTemp === 'Regular') {\n      newAlerts.push({\n        id: 'temp-warning',\n        type: 'warning',\n        message: `Atenção: Temperatura em nível regular (${data.temperatura}°C). Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.temperatura.otimo}°C.`\n      });\n    }\n    \n    // Alertas para umidade\n    if (qualidadeUmid === 'Ruim') {\n      let mensagem = '';\n      if (data.umidade < culturaSelecionada.niveis.umidade.regular) {\n        mensagem = `Alerta: Umidade muito baixa (${data.umidade}%)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.umidade.otimo}%.`;\n      } else {\n        mensagem = `Alerta: Umidade muito alta (${data.umidade}%)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.umidade.otimo}%.`;\n      }\n      \n      newAlerts.push({\n        id: 'humidity-alert',\n        type: 'danger',\n        message: mensagem\n      });\n    } else if (qualidadeUmid === 'Regular') {\n      newAlerts.push({\n        id: 'humidity-warning',\n        type: 'warning',\n        message: `Atenção: Umidade em nível regular (${data.umidade}%). Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.umidade.otimo}%.`\n      });\n    }\n    \n    // Alertas para luminosidade\n    if (qualidadeLuz === 'Ruim') {\n      let mensagem = '';\n      if (data.luminosidade < culturaSelecionada.niveis.luminosidade.regular) {\n        mensagem = `Alerta: Luminosidade muito baixa (${data.luminosidade} lux)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.luminosidade.otimo} lux.`;\n      } else {\n        mensagem = `Alerta: Luminosidade muito alta (${data.luminosidade} lux)! Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.luminosidade.otimo} lux.`;\n      }\n      \n      newAlerts.push({\n        id: 'light-alert',\n        type: 'danger',\n        message: mensagem\n      });\n    } else if (qualidadeLuz === 'Regular') {\n      newAlerts.push({\n        id: 'light-warning',\n        type: 'warning',\n        message: `Atenção: Luminosidade em nível regular (${data.luminosidade} lux). Ideal para ${culturaSelecionada.nome} é ${culturaSelecionada.niveis.luminosidade.otimo} lux.`\n      });\n    }\n    \n    setAlerts(newAlerts);\n  };\n\n  // Toggle simples do tema\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  };\n\n  useEffect(() => {\n    // Definir a primeira cultura como padrão\n    if (culturasData.length > 0 && !culturaSelecionada) {\n      handleCulturaChange(culturasData[0]);\n    }\n    \n    // Simulação de carregamento para demonstração\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n    \n    // Simulação de atualização de dados em tempo real\n    const dataTimer = setInterval(() => {\n      const newData = {\n        temperatura: parseFloat((Math.random() * 20 + 15).toFixed(1)), // Entre 15 e 35\n        luminosidade: Math.floor(Math.random() * 9000 + 1000), // Entre 1000 e 10000\n        umidade: Math.floor(Math.random() * 60 + 20), // Entre 20 e 80\n      };\n      \n      setSensorData(newData);\n      checkConditionsAndCreateAlerts(newData);\n    }, 5000);\n\n    // Tente configurar o Firebase (comentado para fins de depuração)\n    /*\n    try {\n      // Configuração do Firebase\n      const firebaseConfig = {\n        apiKey: \"YOUR_API_KEY\",\n        authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n        databaseURL: \"https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com\",\n        projectId: \"YOUR_PROJECT_ID\",\n        storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n        messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n        appId: \"YOUR_APP_ID\"\n      };\n\n      // Inicializa o Firebase\n      const app = initializeApp(firebaseConfig);\n      const database = getDatabase(app);\n      const sensoresRef = ref(database, 'sensores');\n\n      // Escuta por mudanças no nó 'sensores' do Realtime Database\n      const unsubscribe = onValue(sensoresRef, (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n          setSensorData(data);\n          checkConditionsAndCreateAlerts(data);\n        }\n        setLoading(false);\n      });\n\n      // Função de limpeza para desinscrever quando o componente for desmontado\n      return () => {\n        unsubscribe();\n        clearTimeout(timer);\n        clearInterval(dataTimer);\n      };\n    } catch (error) {\n      console.error(\"Erro ao configurar Firebase:\", error);\n      setLoading(false);\n    }\n    */\n\n    // Verificar condições iniciais\n    checkConditionsAndCreateAlerts(sensorData);\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(dataTimer);\n    };\n  }, [culturaSelecionada]); // Reexecutar quando a cultura mudar\n\n  const teamMembers = [\n    'Ana',\n    'Evellyn',\n    'Hobedes',\n    'Moacir',\n    'Pedro',\n    'Thiago'\n  ];\n\n  // Classe condicional para o tema escuro\n  const appClassName = `app ${darkMode ? 'dark-mode' : ''}`;\n\n  return (\n    <div className={appClassName}>\n      <Header title=\"AGROPOP\" darkMode={darkMode} />\n      \n      <main className=\"main-content\">\n        {/* Seletor de Cultura */}\n        <CulturaSelector \n          culturaSelecionada={culturaSelecionada}\n          onCulturaChange={handleCulturaChange}\n          darkMode={darkMode}\n        />\n        \n        {/* Exibir alertas */}\n        <div className=\"alerts-container\">\n          {alerts.map(alert => (\n            <Alert \n              key={alert.id}\n              type={alert.type}\n              message={alert.message}\n            />\n          ))}\n        </div>\n\n        {loading ? (\n          <div className=\"loading\">Carregando dados dos sensores...</div>\n        ) : (\n          <Dashboard \n            data={sensorData} \n            darkMode={darkMode} \n            limites={limites}\n            culturaSelecionada={culturaSelecionada}\n          />\n        )}\n      </main>\n      <Footer \n        members={teamMembers} \n        darkMode={darkMode} \n        toggleTheme={toggleTheme} \n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}