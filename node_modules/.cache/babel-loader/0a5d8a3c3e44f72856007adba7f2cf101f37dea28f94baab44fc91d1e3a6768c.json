{"ast":null,"code":"var _jsxFileName = \"/Users/dudaalves/iot-agro/src/App.js\",\n  _s = $RefreshSig$();\n// App.js - Componente principal da aplicação atualizado\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Alert from './components/Alert';\nimport ThemeToggle from './components/ThemeToggle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    temperatura: 25.4,\n    luminosidade: 850,\n    umidade: 68\n  });\n  const [loading, setLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [manualTheme, setManualTheme] = useState(null); // null = automático, true = dark, false = light\n  const [alerts, setAlerts] = useState([]);\n\n  // Função para verificar se deve estar no modo escuro com base no horário\n  const shouldBeDarkByTime = () => {\n    const currentHour = new Date().getHours();\n    // Modo escuro das 17:01 (17h) até 4:59 (4h)\n    return currentHour >= 17 || currentHour < 5;\n  };\n\n  // Função para verificar condições e gerar alertas\n  const checkConditionsAndCreateAlerts = data => {\n    const newAlerts = [];\n\n    // Verificar temperatura > 30\n    if (data.temperatura > 30) {\n      newAlerts.push({\n        id: 'temp-high',\n        type: 'danger',\n        message: `Alerta: Temperatura alta (${data.temperatura}°C)! Acima de 30°C.`\n      });\n    }\n\n    // Verificar umidade < 50% ou < 30%\n    if (data.umidade < 30) {\n      newAlerts.push({\n        id: 'humidity-very-low',\n        type: 'danger',\n        message: `Alerta: Umidade crítica (${data.umidade}%)! Abaixo de 30%.`\n      });\n    } else if (data.umidade < 50) {\n      newAlerts.push({\n        id: 'humidity-low',\n        type: 'warning',\n        message: `Atenção: Umidade baixa (${data.umidade}%)! Abaixo de 50%.`\n      });\n    }\n\n    // Novos alertas para luminosidade\n    if (data.luminosidade < 100) {\n      newAlerts.push({\n        id: 'low-light',\n        type: 'warning',\n        message: `Atenção: Pouca luz (${data.luminosidade} lux)! Abaixo de 100 lux.`\n      });\n    } else if (data.luminosidade > 1000) {\n      newAlerts.push({\n        id: 'high-light',\n        type: 'warning',\n        message: `Atenção: Muita luz (${data.luminosidade} lux)! Acima de 1000 lux.`\n      });\n    }\n    setAlerts(newAlerts);\n\n    // Atualizar tema baseado no horário apenas se não estiver em modo manual\n    if (manualTheme === null) {\n      setDarkMode(shouldBeDarkByTime());\n    }\n  };\n\n  // Toggle manual do tema (ignora a definição automática por hora)\n  const toggleTheme = () => {\n    const newDarkMode = !darkMode;\n    setDarkMode(newDarkMode);\n    setManualTheme(newDarkMode); // Guarda a escolha manual\n  };\n\n  // Resetar para modo automático baseado no horário\n  const resetToAutoTheme = () => {\n    setManualTheme(null);\n    setDarkMode(shouldBeDarkByTime());\n  };\n  useEffect(() => {\n    // Verificar o horário inicial e definir o tema\n    if (manualTheme === null) {\n      setDarkMode(shouldBeDarkByTime());\n    }\n\n    // Simulação de carregamento para demonstração\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n\n    // Simulação de atualização de dados em tempo real\n    const dataTimer = setInterval(() => {\n      const newData = {\n        temperatura: parseFloat((Math.random() * 15 + 20).toFixed(1)),\n        // Entre 20 e 35\n        luminosidade: Math.floor(Math.random() * 1500),\n        // Entre 0 e 1500\n        umidade: Math.floor(Math.random() * 80 + 10) // Entre 10 e 90\n      };\n      setSensorData(newData);\n      checkConditionsAndCreateAlerts(newData);\n    }, 5000);\n\n    // Verificar o horário a cada minuto para atualizar o tema automaticamente\n    const themeTimer = setInterval(() => {\n      if (manualTheme === null) {\n        setDarkMode(shouldBeDarkByTime());\n      }\n    }, 60000); // Verificar a cada minuto\n\n    // Tente configurar o Firebase (comentado para fins de depuração)\n    /*\n    try {\n      // Configuração do Firebase\n      const firebaseConfig = {\n        apiKey: \"YOUR_API_KEY\",\n        authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n        databaseURL: \"https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com\",\n        projectId: \"YOUR_PROJECT_ID\",\n        storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n        messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n        appId: \"YOUR_APP_ID\"\n      };\n       // Inicializa o Firebase\n      const app = initializeApp(firebaseConfig);\n      const database = getDatabase(app);\n      const sensoresRef = ref(database, 'sensores');\n       // Escuta por mudanças no nó 'sensores' do Realtime Database\n      const unsubscribe = onValue(sensoresRef, (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n          setSensorData(data);\n          checkConditionsAndCreateAlerts(data);\n        }\n        setLoading(false);\n      });\n       // Função de limpeza para desinscrever quando o componente for desmontado\n      return () => {\n        unsubscribe();\n        clearTimeout(timer);\n        clearInterval(dataTimer);\n        clearInterval(themeTimer);\n      };\n    } catch (error) {\n      console.error(\"Erro ao configurar Firebase:\", error);\n      setLoading(false);\n    }\n    */\n\n    // Verificar condições iniciais\n    checkConditionsAndCreateAlerts(sensorData);\n    return () => {\n      clearTimeout(timer);\n      clearInterval(dataTimer);\n      clearInterval(themeTimer);\n    };\n  }, [manualTheme]); // Adicionar manualTheme como dependência para reagir a mudanças\n\n  const teamMembers = ['Ana', 'Evellyn', 'Hobedes', 'Moacir', 'Pedro', 'Thiago'];\n\n  // Classe condicional para o tema escuro\n  const appClassName = `app ${darkMode ? 'dark-mode' : ''}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: appClassName,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"IoT Agro\",\n      darkMode: darkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"theme-controls\",\n        children: /*#__PURE__*/_jsxDEV(ThemeToggle, {\n          darkMode: darkMode,\n          toggleTheme: toggleTheme,\n          isManual: manualTheme !== null,\n          resetToAuto: resetToAutoTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alerts-container\",\n        children: alerts.map(alert => /*#__PURE__*/_jsxDEV(Alert, {\n          type: alert.type,\n          message: alert.message\n        }, alert.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Carregando dados dos sensores...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n        data: sensorData,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      members: teamMembers,\n      darkMode: darkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"POOOS5gpqsmnaAXLxF4zosz/MDY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","Header","Footer","Alert","ThemeToggle","jsxDEV","_jsxDEV","App","_s","sensorData","setSensorData","temperatura","luminosidade","umidade","loading","setLoading","darkMode","setDarkMode","manualTheme","setManualTheme","alerts","setAlerts","shouldBeDarkByTime","currentHour","Date","getHours","checkConditionsAndCreateAlerts","data","newAlerts","push","id","type","message","toggleTheme","newDarkMode","resetToAutoTheme","timer","setTimeout","dataTimer","setInterval","newData","parseFloat","Math","random","toFixed","floor","themeTimer","clearTimeout","clearInterval","teamMembers","appClassName","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","isManual","resetToAuto","map","alert","members","_c","$RefreshReg$"],"sources":["/Users/dudaalves/iot-agro/src/App.js"],"sourcesContent":["// App.js - Componente principal da aplicação atualizado\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Alert from './components/Alert';\nimport ThemeToggle from './components/ThemeToggle';\n\nfunction App() {\n  const [sensorData, setSensorData] = useState({\n    temperatura: 25.4,\n    luminosidade: 850,\n    umidade: 68\n  });\n  const [loading, setLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [manualTheme, setManualTheme] = useState(null); // null = automático, true = dark, false = light\n  const [alerts, setAlerts] = useState([]);\n\n  // Função para verificar se deve estar no modo escuro com base no horário\n  const shouldBeDarkByTime = () => {\n    const currentHour = new Date().getHours();\n    // Modo escuro das 17:01 (17h) até 4:59 (4h)\n    return currentHour >= 17 || currentHour < 5;\n  };\n\n  // Função para verificar condições e gerar alertas\n  const checkConditionsAndCreateAlerts = (data) => {\n    const newAlerts = [];\n    \n    // Verificar temperatura > 30\n    if (data.temperatura > 30) {\n      newAlerts.push({\n        id: 'temp-high',\n        type: 'danger',\n        message: `Alerta: Temperatura alta (${data.temperatura}°C)! Acima de 30°C.`\n      });\n    }\n    \n    // Verificar umidade < 50% ou < 30%\n    if (data.umidade < 30) {\n      newAlerts.push({\n        id: 'humidity-very-low',\n        type: 'danger',\n        message: `Alerta: Umidade crítica (${data.umidade}%)! Abaixo de 30%.`\n      });\n    } else if (data.umidade < 50) {\n      newAlerts.push({\n        id: 'humidity-low',\n        type: 'warning',\n        message: `Atenção: Umidade baixa (${data.umidade}%)! Abaixo de 50%.`\n      });\n    }\n    \n    // Novos alertas para luminosidade\n    if (data.luminosidade < 100) {\n      newAlerts.push({\n        id: 'low-light',\n        type: 'warning',\n        message: `Atenção: Pouca luz (${data.luminosidade} lux)! Abaixo de 100 lux.`\n      });\n    } else if (data.luminosidade > 1000) {\n      newAlerts.push({\n        id: 'high-light',\n        type: 'warning',\n        message: `Atenção: Muita luz (${data.luminosidade} lux)! Acima de 1000 lux.`\n      });\n    }\n    \n    setAlerts(newAlerts);\n    \n    // Atualizar tema baseado no horário apenas se não estiver em modo manual\n    if (manualTheme === null) {\n      setDarkMode(shouldBeDarkByTime());\n    }\n  };\n\n  // Toggle manual do tema (ignora a definição automática por hora)\n  const toggleTheme = () => {\n    const newDarkMode = !darkMode;\n    setDarkMode(newDarkMode);\n    setManualTheme(newDarkMode); // Guarda a escolha manual\n  };\n\n  // Resetar para modo automático baseado no horário\n  const resetToAutoTheme = () => {\n    setManualTheme(null);\n    setDarkMode(shouldBeDarkByTime());\n  };\n\n  useEffect(() => {\n    // Verificar o horário inicial e definir o tema\n    if (manualTheme === null) {\n      setDarkMode(shouldBeDarkByTime());\n    }\n    \n    // Simulação de carregamento para demonstração\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n    \n    // Simulação de atualização de dados em tempo real\n    const dataTimer = setInterval(() => {\n      const newData = {\n        temperatura: parseFloat((Math.random() * 15 + 20).toFixed(1)), // Entre 20 e 35\n        luminosidade: Math.floor(Math.random() * 1500), // Entre 0 e 1500\n        umidade: Math.floor(Math.random() * 80 + 10), // Entre 10 e 90\n      };\n      \n      setSensorData(newData);\n      checkConditionsAndCreateAlerts(newData);\n    }, 5000);\n\n    // Verificar o horário a cada minuto para atualizar o tema automaticamente\n    const themeTimer = setInterval(() => {\n      if (manualTheme === null) {\n        setDarkMode(shouldBeDarkByTime());\n      }\n    }, 60000); // Verificar a cada minuto\n\n    // Tente configurar o Firebase (comentado para fins de depuração)\n    /*\n    try {\n      // Configuração do Firebase\n      const firebaseConfig = {\n        apiKey: \"YOUR_API_KEY\",\n        authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n        databaseURL: \"https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com\",\n        projectId: \"YOUR_PROJECT_ID\",\n        storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n        messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n        appId: \"YOUR_APP_ID\"\n      };\n\n      // Inicializa o Firebase\n      const app = initializeApp(firebaseConfig);\n      const database = getDatabase(app);\n      const sensoresRef = ref(database, 'sensores');\n\n      // Escuta por mudanças no nó 'sensores' do Realtime Database\n      const unsubscribe = onValue(sensoresRef, (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n          setSensorData(data);\n          checkConditionsAndCreateAlerts(data);\n        }\n        setLoading(false);\n      });\n\n      // Função de limpeza para desinscrever quando o componente for desmontado\n      return () => {\n        unsubscribe();\n        clearTimeout(timer);\n        clearInterval(dataTimer);\n        clearInterval(themeTimer);\n      };\n    } catch (error) {\n      console.error(\"Erro ao configurar Firebase:\", error);\n      setLoading(false);\n    }\n    */\n\n    // Verificar condições iniciais\n    checkConditionsAndCreateAlerts(sensorData);\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(dataTimer);\n      clearInterval(themeTimer);\n    };\n  }, [manualTheme]); // Adicionar manualTheme como dependência para reagir a mudanças\n\n  const teamMembers = [\n    'Ana',\n    'Evellyn',\n    'Hobedes',\n    'Moacir',\n    'Pedro',\n    'Thiago'\n  ];\n\n  // Classe condicional para o tema escuro\n  const appClassName = `app ${darkMode ? 'dark-mode' : ''}`;\n\n  return (\n    <div className={appClassName}>\n      <Header title=\"IoT Agro\" darkMode={darkMode} />\n      \n      <main className=\"main-content\">\n        {/* Botão de toggle de tema */}\n        <div className=\"theme-controls\">\n          <ThemeToggle \n            darkMode={darkMode} \n            toggleTheme={toggleTheme} \n            isManual={manualTheme !== null}\n            resetToAuto={resetToAutoTheme}\n          />\n        </div>\n        \n        {/* Exibir alertas */}\n        <div className=\"alerts-container\">\n          {alerts.map(alert => (\n            <Alert \n              key={alert.id}\n              type={alert.type}\n              message={alert.message}\n            />\n          ))}\n        </div>\n\n        {loading ? (\n          <div className=\"loading\">Carregando dados dos sensores...</div>\n        ) : (\n          <Dashboard data={sensorData} darkMode={darkMode} />\n        )}\n      </main>\n      <Footer members={teamMembers} darkMode={darkMode} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC;IAC3Ca,WAAW,EAAE,IAAI;IACjBC,YAAY,EAAE,GAAG;IACjBC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACsB,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAMwB,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IACzC;IACA,OAAOF,WAAW,IAAI,EAAE,IAAIA,WAAW,GAAG,CAAC;EAC7C,CAAC;;EAED;EACA,MAAMG,8BAA8B,GAAIC,IAAI,IAAK;IAC/C,MAAMC,SAAS,GAAG,EAAE;;IAEpB;IACA,IAAID,IAAI,CAAChB,WAAW,GAAG,EAAE,EAAE;MACzBiB,SAAS,CAACC,IAAI,CAAC;QACbC,EAAE,EAAE,WAAW;QACfC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,6BAA6BL,IAAI,CAAChB,WAAW;MACxD,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIgB,IAAI,CAACd,OAAO,GAAG,EAAE,EAAE;MACrBe,SAAS,CAACC,IAAI,CAAC;QACbC,EAAE,EAAE,mBAAmB;QACvBC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,4BAA4BL,IAAI,CAACd,OAAO;MACnD,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIc,IAAI,CAACd,OAAO,GAAG,EAAE,EAAE;MAC5Be,SAAS,CAACC,IAAI,CAAC;QACbC,EAAE,EAAE,cAAc;QAClBC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE,2BAA2BL,IAAI,CAACd,OAAO;MAClD,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIc,IAAI,CAACf,YAAY,GAAG,GAAG,EAAE;MAC3BgB,SAAS,CAACC,IAAI,CAAC;QACbC,EAAE,EAAE,WAAW;QACfC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE,uBAAuBL,IAAI,CAACf,YAAY;MACnD,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIe,IAAI,CAACf,YAAY,GAAG,IAAI,EAAE;MACnCgB,SAAS,CAACC,IAAI,CAAC;QACbC,EAAE,EAAE,YAAY;QAChBC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE,uBAAuBL,IAAI,CAACf,YAAY;MACnD,CAAC,CAAC;IACJ;IAEAS,SAAS,CAACO,SAAS,CAAC;;IAEpB;IACA,IAAIV,WAAW,KAAK,IAAI,EAAE;MACxBD,WAAW,CAACK,kBAAkB,CAAC,CAAC,CAAC;IACnC;EACF,CAAC;;EAED;EACA,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,WAAW,GAAG,CAAClB,QAAQ;IAC7BC,WAAW,CAACiB,WAAW,CAAC;IACxBf,cAAc,CAACe,WAAW,CAAC,CAAC,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BhB,cAAc,CAAC,IAAI,CAAC;IACpBF,WAAW,CAACK,kBAAkB,CAAC,CAAC,CAAC;EACnC,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACd;IACA,IAAImB,WAAW,KAAK,IAAI,EAAE;MACxBD,WAAW,CAACK,kBAAkB,CAAC,CAAC,CAAC;IACnC;;IAEA;IACA,MAAMc,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7BtB,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,MAAMuB,SAAS,GAAGC,WAAW,CAAC,MAAM;MAClC,MAAMC,OAAO,GAAG;QACd7B,WAAW,EAAE8B,UAAU,CAAC,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;QAAE;QAC/DhC,YAAY,EAAE8B,IAAI,CAACG,KAAK,CAACH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;QAAE;QAChD9B,OAAO,EAAE6B,IAAI,CAACG,KAAK,CAACH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAE;MAChD,CAAC;MAEDjC,aAAa,CAAC8B,OAAO,CAAC;MACtBd,8BAA8B,CAACc,OAAO,CAAC;IACzC,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,MAAMM,UAAU,GAAGP,WAAW,CAAC,MAAM;MACnC,IAAIrB,WAAW,KAAK,IAAI,EAAE;QACxBD,WAAW,CAACK,kBAAkB,CAAC,CAAC,CAAC;MACnC;IACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAKI;IACAI,8BAA8B,CAACjB,UAAU,CAAC;IAE1C,OAAO,MAAM;MACXsC,YAAY,CAACX,KAAK,CAAC;MACnBY,aAAa,CAACV,SAAS,CAAC;MACxBU,aAAa,CAACF,UAAU,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,CAAC5B,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEnB,MAAM+B,WAAW,GAAG,CAClB,KAAK,EACL,SAAS,EACT,SAAS,EACT,QAAQ,EACR,OAAO,EACP,QAAQ,CACT;;EAED;EACA,MAAMC,YAAY,GAAG,OAAOlC,QAAQ,GAAG,WAAW,GAAG,EAAE,EAAE;EAEzD,oBACEV,OAAA;IAAK6C,SAAS,EAAED,YAAa;IAAAE,QAAA,gBAC3B9C,OAAA,CAACL,MAAM;MAACoD,KAAK,EAAC,UAAU;MAACrC,QAAQ,EAAEA;IAAS;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE/CnD,OAAA;MAAM6C,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAE5B9C,OAAA;QAAK6C,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC7B9C,OAAA,CAACF,WAAW;UACVY,QAAQ,EAAEA,QAAS;UACnBiB,WAAW,EAAEA,WAAY;UACzByB,QAAQ,EAAExC,WAAW,KAAK,IAAK;UAC/ByC,WAAW,EAAExB;QAAiB;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNnD,OAAA;QAAK6C,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAC9BhC,MAAM,CAACwC,GAAG,CAACC,KAAK,iBACfvD,OAAA,CAACH,KAAK;UAEJ4B,IAAI,EAAE8B,KAAK,CAAC9B,IAAK;UACjBC,OAAO,EAAE6B,KAAK,CAAC7B;QAAQ,GAFlB6B,KAAK,CAAC/B,EAAE;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGd,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EAEL3C,OAAO,gBACNR,OAAA;QAAK6C,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAC;MAAgC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,gBAE/DnD,OAAA,CAACN,SAAS;QAAC2B,IAAI,EAAElB,UAAW;QAACO,QAAQ,EAAEA;MAAS;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACnD;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACPnD,OAAA,CAACJ,MAAM;MAAC4D,OAAO,EAAEb,WAAY;MAACjC,QAAQ,EAAEA;IAAS;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEV;AAACjD,EAAA,CAnNQD,GAAG;AAAAwD,EAAA,GAAHxD,GAAG;AAqNZ,eAAeA,GAAG;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}