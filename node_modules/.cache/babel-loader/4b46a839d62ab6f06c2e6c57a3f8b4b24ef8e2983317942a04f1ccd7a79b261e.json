{"ast":null,"code":"var _jsxFileName = \"/Users/dudaalves/iot-agro/src/App.js\",\n  _s = $RefreshSig$();\n// App.js - Com seletor de cultura\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Alert from './components/Alert';\nimport CulturaSelector from './components/CulturaSelector';\nimport culturasData from './data/culturasData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    temperatura: 25.4,\n    luminosidade: 850,\n    umidade: 68\n  });\n  const [loading, setLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [alerts, setAlerts] = useState([]);\n  const [culturaSelecionada, setCulturaSelecionada] = useState(null);\n  const [limites, setLimites] = useState({\n    temperatura: {\n      min: 0,\n      max: 40\n    },\n    // Valores padrão\n    luminosidade: {\n      min: 0,\n      max: 1500\n    },\n    // Valores padrão\n    umidade: {\n      min: 0,\n      max: 100\n    } // Valores padrão\n  });\n\n  // Função para lidar com a mudança de cultura\n  const handleCulturaChange = cultura => {\n    setCulturaSelecionada(cultura);\n    setLimites(cultura.limites);\n  };\n\n  // Função para verificar condições e gerar alertas com base nos limites\n  const checkConditionsAndCreateAlerts = data => {\n    const newAlerts = [];\n\n    // Verificar temperatura fora dos limites\n    if (data.temperatura < limites.temperatura.min) {\n      newAlerts.push({\n        id: 'temp-low',\n        type: 'warning',\n        message: `Alerta: Temperatura baixa (${data.temperatura}°C)! Abaixo do mínimo recomendado (${limites.temperatura.min}°C).`\n      });\n    } else if (data.temperatura > limites.temperatura.max) {\n      newAlerts.push({\n        id: 'temp-high',\n        type: 'danger',\n        message: `Alerta: Temperatura alta (${data.temperatura}°C)! Acima do máximo recomendado (${limites.temperatura.max}°C).`\n      });\n    }\n\n    // Verificar umidade fora dos limites\n    if (data.umidade < limites.umidade.min) {\n      newAlerts.push({\n        id: 'humidity-low',\n        type: 'danger',\n        message: `Alerta: Umidade baixa (${data.umidade}%)! Abaixo do mínimo recomendado (${limites.umidade.min}%).`\n      });\n    } else if (data.umidade > limites.umidade.max) {\n      newAlerts.push({\n        id: 'humidity-high',\n        type: 'warning',\n        message: `Alerta: Umidade alta (${data.umidade}%)! Acima do máximo recomendado (${limites.umidade.max}%).`\n      });\n    }\n\n    // Verificar luminosidade fora dos limites\n    if (data.luminosidade < limites.luminosidade.min) {\n      newAlerts.push({\n        id: 'light-low',\n        type: 'warning',\n        message: `Alerta: Luminosidade baixa (${data.luminosidade} lux)! Abaixo do mínimo recomendado (${limites.luminosidade.min} lux).`\n      });\n    } else if (data.luminosidade > limites.luminosidade.max) {\n      newAlerts.push({\n        id: 'light-high',\n        type: 'warning',\n        message: `Alerta: Luminosidade alta (${data.luminosidade} lux)! Acima do máximo recomendado (${limites.luminosidade.max} lux).`\n      });\n    }\n    setAlerts(newAlerts);\n  };\n\n  // Toggle simples do tema\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  };\n  useEffect(() => {\n    // Definir a primeira cultura como padrão\n    if (culturasData.length > 0 && !culturaSelecionada) {\n      handleCulturaChange(culturasData[0]);\n    }\n\n    // Simulação de carregamento para demonstração\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n\n    // Simulação de atualização de dados em tempo real\n    const dataTimer = setInterval(() => {\n      const newData = {\n        temperatura: parseFloat((Math.random() * 15 + 20).toFixed(1)),\n        // Entre 20 e 35\n        luminosidade: Math.floor(Math.random() * 1500),\n        // Entre 0 e 1500\n        umidade: Math.floor(Math.random() * 80 + 10) // Entre 10 e 90\n      };\n      setSensorData(newData);\n      checkConditionsAndCreateAlerts(newData);\n    }, 5000);\n\n    // Tente configurar o Firebase (comentado para fins de depuração)\n    /*\n    try {\n      // Configuração do Firebase\n      const firebaseConfig = {\n        apiKey: \"YOUR_API_KEY\",\n        authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n        databaseURL: \"https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com\",\n        projectId: \"YOUR_PROJECT_ID\",\n        storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n        messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n        appId: \"YOUR_APP_ID\"\n      };\n       // Inicializa o Firebase\n      const app = initializeApp(firebaseConfig);\n      const database = getDatabase(app);\n      const sensoresRef = ref(database, 'sensores');\n       // Escuta por mudanças no nó 'sensores' do Realtime Database\n      const unsubscribe = onValue(sensoresRef, (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n          setSensorData(data);\n          checkConditionsAndCreateAlerts(data);\n        }\n        setLoading(false);\n      });\n       // Função de limpeza para desinscrever quando o componente for desmontado\n      return () => {\n        unsubscribe();\n        clearTimeout(timer);\n        clearInterval(dataTimer);\n      };\n    } catch (error) {\n      console.error(\"Erro ao configurar Firebase:\", error);\n      setLoading(false);\n    }\n    */\n\n    // Verificar condições iniciais\n    checkConditionsAndCreateAlerts(sensorData);\n    return () => {\n      clearTimeout(timer);\n      clearInterval(dataTimer);\n    };\n  }, [culturaSelecionada, limites]); // Adicionar dependências para re-verificar quando os limites mudarem\n\n  const teamMembers = ['Ana', 'Evellyn', 'Hobedes', 'Moacir', 'Pedro', 'Thiago'];\n\n  // Classe condicional para o tema escuro\n  const appClassName = `app ${darkMode ? 'dark-mode' : ''}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: appClassName,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"IoT Agro\",\n      darkMode: darkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(CulturaSelector, {\n        culturaSelecionada: culturaSelecionada,\n        onCulturaChange: handleCulturaChange,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alerts-container\",\n        children: alerts.map(alert => /*#__PURE__*/_jsxDEV(Alert, {\n          type: alert.type,\n          message: alert.message\n        }, alert.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Carregando dados dos sensores...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n        data: sensorData,\n        darkMode: darkMode,\n        limites: limites\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      members: teamMembers,\n      darkMode: darkMode,\n      toggleTheme: toggleTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aQrajgfKXrcWIusF0H2wIE+WvWg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","Header","Footer","Alert","CulturaSelector","culturasData","jsxDEV","_jsxDEV","App","_s","sensorData","setSensorData","temperatura","luminosidade","umidade","loading","setLoading","darkMode","setDarkMode","alerts","setAlerts","culturaSelecionada","setCulturaSelecionada","limites","setLimites","min","max","handleCulturaChange","cultura","checkConditionsAndCreateAlerts","data","newAlerts","push","id","type","message","toggleTheme","length","timer","setTimeout","dataTimer","setInterval","newData","parseFloat","Math","random","toFixed","floor","clearTimeout","clearInterval","teamMembers","appClassName","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","onCulturaChange","map","alert","members","_c","$RefreshReg$"],"sources":["/Users/dudaalves/iot-agro/src/App.js"],"sourcesContent":["// App.js - Com seletor de cultura\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Alert from './components/Alert';\nimport CulturaSelector from './components/CulturaSelector';\nimport culturasData from './data/culturasData';\n\nfunction App() {\n  const [sensorData, setSensorData] = useState({\n    temperatura: 25.4,\n    luminosidade: 850,\n    umidade: 68\n  });\n  const [loading, setLoading] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [alerts, setAlerts] = useState([]);\n  const [culturaSelecionada, setCulturaSelecionada] = useState(null);\n  const [limites, setLimites] = useState({\n    temperatura: { min: 0, max: 40 },    // Valores padrão\n    luminosidade: { min: 0, max: 1500 }, // Valores padrão\n    umidade: { min: 0, max: 100 }        // Valores padrão\n  });\n\n  // Função para lidar com a mudança de cultura\n  const handleCulturaChange = (cultura) => {\n    setCulturaSelecionada(cultura);\n    setLimites(cultura.limites);\n  };\n\n  // Função para verificar condições e gerar alertas com base nos limites\n  const checkConditionsAndCreateAlerts = (data) => {\n    const newAlerts = [];\n    \n    // Verificar temperatura fora dos limites\n    if (data.temperatura < limites.temperatura.min) {\n      newAlerts.push({\n        id: 'temp-low',\n        type: 'warning',\n        message: `Alerta: Temperatura baixa (${data.temperatura}°C)! Abaixo do mínimo recomendado (${limites.temperatura.min}°C).`\n      });\n    } else if (data.temperatura > limites.temperatura.max) {\n      newAlerts.push({\n        id: 'temp-high',\n        type: 'danger',\n        message: `Alerta: Temperatura alta (${data.temperatura}°C)! Acima do máximo recomendado (${limites.temperatura.max}°C).`\n      });\n    }\n    \n    // Verificar umidade fora dos limites\n    if (data.umidade < limites.umidade.min) {\n      newAlerts.push({\n        id: 'humidity-low',\n        type: 'danger',\n        message: `Alerta: Umidade baixa (${data.umidade}%)! Abaixo do mínimo recomendado (${limites.umidade.min}%).`\n      });\n    } else if (data.umidade > limites.umidade.max) {\n      newAlerts.push({\n        id: 'humidity-high',\n        type: 'warning',\n        message: `Alerta: Umidade alta (${data.umidade}%)! Acima do máximo recomendado (${limites.umidade.max}%).`\n      });\n    }\n    \n    // Verificar luminosidade fora dos limites\n    if (data.luminosidade < limites.luminosidade.min) {\n      newAlerts.push({\n        id: 'light-low',\n        type: 'warning',\n        message: `Alerta: Luminosidade baixa (${data.luminosidade} lux)! Abaixo do mínimo recomendado (${limites.luminosidade.min} lux).`\n      });\n    } else if (data.luminosidade > limites.luminosidade.max) {\n      newAlerts.push({\n        id: 'light-high',\n        type: 'warning',\n        message: `Alerta: Luminosidade alta (${data.luminosidade} lux)! Acima do máximo recomendado (${limites.luminosidade.max} lux).`\n      });\n    }\n    \n    setAlerts(newAlerts);\n  };\n\n  // Toggle simples do tema\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  };\n\n  useEffect(() => {\n    // Definir a primeira cultura como padrão\n    if (culturasData.length > 0 && !culturaSelecionada) {\n      handleCulturaChange(culturasData[0]);\n    }\n    \n    // Simulação de carregamento para demonstração\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n    \n    // Simulação de atualização de dados em tempo real\n    const dataTimer = setInterval(() => {\n      const newData = {\n        temperatura: parseFloat((Math.random() * 15 + 20).toFixed(1)), // Entre 20 e 35\n        luminosidade: Math.floor(Math.random() * 1500), // Entre 0 e 1500\n        umidade: Math.floor(Math.random() * 80 + 10), // Entre 10 e 90\n      };\n      \n      setSensorData(newData);\n      checkConditionsAndCreateAlerts(newData);\n    }, 5000);\n\n    // Tente configurar o Firebase (comentado para fins de depuração)\n    /*\n    try {\n      // Configuração do Firebase\n      const firebaseConfig = {\n        apiKey: \"YOUR_API_KEY\",\n        authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n        databaseURL: \"https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com\",\n        projectId: \"YOUR_PROJECT_ID\",\n        storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n        messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n        appId: \"YOUR_APP_ID\"\n      };\n\n      // Inicializa o Firebase\n      const app = initializeApp(firebaseConfig);\n      const database = getDatabase(app);\n      const sensoresRef = ref(database, 'sensores');\n\n      // Escuta por mudanças no nó 'sensores' do Realtime Database\n      const unsubscribe = onValue(sensoresRef, (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n          setSensorData(data);\n          checkConditionsAndCreateAlerts(data);\n        }\n        setLoading(false);\n      });\n\n      // Função de limpeza para desinscrever quando o componente for desmontado\n      return () => {\n        unsubscribe();\n        clearTimeout(timer);\n        clearInterval(dataTimer);\n      };\n    } catch (error) {\n      console.error(\"Erro ao configurar Firebase:\", error);\n      setLoading(false);\n    }\n    */\n\n    // Verificar condições iniciais\n    checkConditionsAndCreateAlerts(sensorData);\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(dataTimer);\n    };\n  }, [culturaSelecionada, limites]); // Adicionar dependências para re-verificar quando os limites mudarem\n\n  const teamMembers = [\n    'Ana',\n    'Evellyn',\n    'Hobedes',\n    'Moacir',\n    'Pedro',\n    'Thiago'\n  ];\n\n  // Classe condicional para o tema escuro\n  const appClassName = `app ${darkMode ? 'dark-mode' : ''}`;\n\n  return (\n    <div className={appClassName}>\n      <Header title=\"IoT Agro\" darkMode={darkMode} />\n      \n      <main className=\"main-content\">\n        {/* Seletor de Cultura */}\n        <CulturaSelector \n          culturaSelecionada={culturaSelecionada}\n          onCulturaChange={handleCulturaChange}\n          darkMode={darkMode}\n        />\n        \n        {/* Exibir alertas */}\n        <div className=\"alerts-container\">\n          {alerts.map(alert => (\n            <Alert \n              key={alert.id}\n              type={alert.type}\n              message={alert.message}\n            />\n          ))}\n        </div>\n\n        {loading ? (\n          <div className=\"loading\">Carregando dados dos sensores...</div>\n        ) : (\n          <Dashboard \n            data={sensorData} \n            darkMode={darkMode} \n            limites={limites}\n          />\n        )}\n      </main>\n      <Footer \n        members={teamMembers} \n        darkMode={darkMode} \n        toggleTheme={toggleTheme} \n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}